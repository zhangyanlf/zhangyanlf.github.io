<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhangyanlf</title>
  
  <subtitle>iOS、Android、React/React-Native</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangyanlf.top/"/>
  <updated>2018-10-31T09:23:43.000Z</updated>
  <id>https://zhangyanlf.top/</id>
  
  <author>
    <name>zhangyanlf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>隐私政策</title>
    <link href="https://zhangyanlf.top/2018/10/29/%E9%9A%90%E7%A7%81%E6%94%BF%E7%AD%96/"/>
    <id>https://zhangyanlf.top/2018/10/29/隐私政策/</id>
    <published>2018-10-28T16:00:00.000Z</published>
    <updated>2018-10-31T09:23:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本应用尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本应用会按照本隐私权政策的规定使用和披露您的个人信息。但本应用将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本应用不会将这些信息对外披露或向第三方提供。本应用会不时更新本隐私权政策。-您在同意本应用服务使用协议之时，即视为您已经同意本隐私权政策全部内容。本隐私权政策属于本应用服务使用协议不可分割的一部分。"><a href="#本应用尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本应用会按照本隐私权政策的规定使用和披露您的个人信息。但本应用将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本应用不会将这些信息对外披露或向第三方提供。本应用会不时更新本隐私权政策。-您在同意本应用服务使用协议之时，即视为您已经同意本隐私权政策全部内容。本隐私权政策属于本应用服务使用协议不可分割的一部分。" class="headerlink" title="本应用尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本应用会按照本隐私权政策的规定使用和披露您的个人信息。但本应用将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本应用不会将这些信息对外披露或向第三方提供。本应用会不时更新本隐私权政策。 您在同意本应用服务使用协议之时，即视为您已经同意本隐私权政策全部内容。本隐私权政策属于本应用服务使用协议不可分割的一部分。"></a>本应用尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本应用会按照本隐私权政策的规定使用和披露您的个人信息。但本应用将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本应用不会将这些信息对外披露或向第三方提供。本应用会不时更新本隐私权政策。 您在同意本应用服务使用协议之时，即视为您已经同意本隐私权政策全部内容。本隐私权政策属于本应用服务使用协议不可分割的一部分。</h2><h3 id="1-适用范围"><a href="#1-适用范围" class="headerlink" title="1. 适用范围"></a>1. 适用范围</h3><p>(a) 在您注册本应用帐号时，您根据本应用要求提供的个人注册信息；<br>(b) 在您使用本应用网络服务，或访问本应用平台网页时，本应用自动接收并记录的您的浏览器和计算机上的信息，包括但不限于您的IP地址、浏览器的类型、使用的语言、访问日期和时间、软硬件特征信息及您需求的网页记录等数据；<br>(c) 本应用通过合法途径从商业伙伴处取得的用户个人数据。<br>您了解并同意，以下信息不适用本隐私权政策：<br>(a) 您在使用本应用平台提供的搜索服务时输入的关键字信息；<br>(b) 本应用收集到的您在本应用发布的有关信息数据，包括但不限于参与活动、成交信息及评价详情；<br>(c) 违反法律规定或违反本应用规则行为及本应用已对您采取的措施。</p><h3 id="2-信息使用"><a href="#2-信息使用" class="headerlink" title="2. 信息使用"></a>2. 信息使用</h3><p>(a)本应用不会向任何无关第三方提供、出售、出租、分享或交易您的个人信息，除非事先得到您的许可，或该第三方和本应用（含本应用关联公司）单独或共同为您提供服务，且在该服务结束后，其将被禁止访问包括其以前能够访问的所有这些资料。<br>(b) 本应用亦不允许任何第三方以任何手段收集、编辑、出售或者无偿传播您的个人信息。任何本应用平台用户如从事上述活动，一经发现，本应用有权立即终止与该用户的服务协议。<br>(c) 为服务用户的目的，本应用可能通过使用您的个人信息，向您提供您感兴趣的信息，包括但不限于向您发出产品和服务信息，或者与本应用合作伙伴共享信息以便他们向您发送有关其产品和服务的信息（后者需要您的事先同意）。</p><h3 id="3-信息披露"><a href="#3-信息披露" class="headerlink" title="3. 信息披露"></a>3. 信息披露</h3><p>在如下情况下，本应用将依据您的个人意愿或法律的规定全部或部分的披露您的个人信息：<br>(a) 经您事先同意，向第三方披露；<br>(b)为提供您所要求的产品和服务，而必须和第三方分享您的个人信息；<br>(c) 根据法律的有关规定，或者行政或司法机构的要求，向第三方或者行政、司法机构披露；<br>(d) 如您出现违反中国有关法律、法规或者本应用服务协议或相关规则的情况，需要向第三方披露；<br>(e) 如您是适格的知识产权投诉人并已提起投诉，应被投诉人要求，向被投诉人披露，以便双方处理可能的权利纠纷；<br>(f) 在本应用平台上创建的某一交易中，如交易任何一方履行或部分履行了交易义务并提出信息披露请求的，本应用有权决定向该用户提供其交易对方的联络方式等必要信息，以促成交易的完成或纠纷的解决。<br>(g) 其它本应用根据法律、法规或者网站政策认为合适的披露。</p><h3 id="4-信息存储和交换"><a href="#4-信息存储和交换" class="headerlink" title="4. 信息存储和交换"></a>4. 信息存储和交换</h3><p>本应用收集的有关您的信息和资料将保存在本应用及（或）其关联公司的服务器上，这些信息和资料可能传送至您所在国家、地区或本应用收集信息和资料所在地的境外并在境外被访问、存储和展示。</p><h3 id="5-Cookie的使用"><a href="#5-Cookie的使用" class="headerlink" title="5. Cookie的使用"></a>5. Cookie的使用</h3><p>(a) 在您未拒绝接受cookies的情况下，本应用会在您的计算机上设定或取用cookies ，以便您能登录或使用依赖于cookies的本应用平台服务或功能。本应用使用cookies可为您提供更加周到的个性化服务，包括推广服务。<br>(b) 您有权选择接受或拒绝接受cookies。您可以通过修改浏览器设置的方式拒绝接受cookies。但如果您选择拒绝接受cookies，则您可能无法登录或使用依赖于cookies的本应用网络服务或功能。<br>(c) 通过本应用所设cookies所取得的有关信息，将适用本政策。</p><h3 id="6-信息安全"><a href="#6-信息安全" class="headerlink" title="6. 信息安全"></a>6. 信息安全</h3><p>(a) 本应用帐号均有安全保护功能，请妥善保管您的用户名及密码信息。本应用将通过对用户密码进行加密等安全措施确保您的信息不丢失，不被滥用和变造。尽管有前述安全措施，但同时也请您注意在信息网络上不存在“完善的安全措施”。<br>(b) 在使用本应用网络服务进行网上交易时，您不可避免的要向交易对方或潜在的交易对</p><h3 id="7-本隐私政策的更改"><a href="#7-本隐私政策的更改" class="headerlink" title="7. 本隐私政策的更改"></a>7. 本隐私政策的更改</h3><p>(a)如果决定更改隐私政策，我们会在本政策中、本公司网站中以及我们认为适当的位置发布这些更改，以便您了解我们如何收集、使用您的个人信息，哪些人可以访问这些信息，以及在什么情况下我们会透露这些信息。<br>(b)本公司保留随时修改本政策的权利，因此请经常查看。如对本政策作出重大更改，本公司会通过网站通知的形式告知。</p><p>方披露自己的个人信息，如联络方式或者邮政地址。请您妥善保护自己的个人信息，仅在必要的情形下向他人提供。如您发现自己的个人信息泄密，尤其是本应用用户名及密码发生泄露，请您立即联络本应用客服，以便本应用采取相应措施。</p><p><a href="zhangyanlf.cn">已同步至本人博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;本应用尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本应用会按照本隐私权政策的规定使用和披露您的个人信息。但本应用将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本应用不会将这些信息对外披
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://zhangyanlf.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS Storyboard  使用技巧分享</title>
    <link href="https://zhangyanlf.top/2018/08/16/iOS%20Storyboard%20%20%E6%8A%80%E5%B7%A7/"/>
    <id>https://zhangyanlf.top/2018/08/16/iOS Storyboard  技巧/</id>
    <published>2018-08-15T16:00:00.000Z</published>
    <updated>2018-08-16T07:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间一直在忙项目，好久没有更新博客了，今天给大家分享一个iOS开发者使用Storyboard 设置属性的小技巧（将属性设置直接添加到Storyboard面板设置及实时查看效果）：</p><h4 id="下面以UIVIew设置圆角及阴影效果展示具体效果"><a href="#下面以UIVIew设置圆角及阴影效果展示具体效果" class="headerlink" title="下面以UIVIew设置圆角及阴影效果展示具体效果"></a>下面以UIVIew设置圆角及阴影效果展示具体效果</h4><ul><li>首先创建Swift file 对UIView进行扩展 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">extension UIView &#123;</span><br><span class="line">    @IBInspectable </span><br><span class="line">    var cornerRadius : CGFloat &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            return layer.cornerRadius</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            layer.cornerRadius = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //阴影圆角</span><br><span class="line">    @IBInspectable</span><br><span class="line">    var shadowRadius : CGFloat &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            return layer.shadowRadius</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            layer.shadowRadius = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //阴影偏移</span><br><span class="line">    @IBInspectable</span><br><span class="line">    var shadowOffset : CGSize &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            return layer.shadowOffset</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            layer.shadowOffset = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //阴影颜色</span><br><span class="line">    @IBInspectable</span><br><span class="line">    var shadowColor : UIColor? &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            return layer.shadowColor != nil ?  UIColor(cgColor: layer.shadowColor!) : nil</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            layer.shadowColor = newValue?.cgColor</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //阴影透明度</span><br><span class="line">    @IBInspectable</span><br><span class="line">    var shadowOpacity : Float &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            return layer.shadowOpacity</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            layer.shadowOpacity = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p> @IBInspectable  可以使设置的属性直接显示在Storyboard面板中，如图：</p></blockquote><p><img src="https://img-blog.csdn.net/20180816144539332?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM0MzgwNDM4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>属性设置可以及时在Storyboard中看到效果(当前设置View的Class设置为ArcView)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@IBDesignable  </span><br><span class="line">class ArcView: UIView &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>@IBDesignable  在Storyboard中及时看到效果(阴影效果)</p></blockquote><p>这种方式可以在开发中节省不少代码量，看到的小伙伴们赶紧去试试效果，后期有好的技巧还会在博客中持续更新，小伙伴可以多多关注。</p><p><a href="https://github.com/zhangyanlf/newOfO" target="_blank" rel="noopener">也可以去GitHUb查看使用案例</a></p><p><a href="zhangyanlf.cn">已同步至本人博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一段时间一直在忙项目，好久没有更新博客了，今天给大家分享一个iOS开发者使用Storyboard 设置属性的小技巧（将属性设置直接添加到Storyboard面板设置及实时查看效果）：&lt;/p&gt;
&lt;h4 id=&quot;下面以UIVIew设置圆角及阴影效果展示具体效果&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="iOS Swift" scheme="https://zhangyanlf.top/tags/iOS-Swift/"/>
    
  </entry>
  
  <entry>
    <title>React-Native封装Tabbar 实现中间按钮溢出效果(Android/iOS)</title>
    <link href="https://zhangyanlf.top/2018/02/05/React-Native%E5%B0%81%E8%A3%85Tabbar%20%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E6%8C%89%E9%92%AE%E6%BA%A2%E5%87%BA%E6%95%88%E6%9E%9C(Android_iOS)/"/>
    <id>https://zhangyanlf.top/2018/02/05/React-Native封装Tabbar 实现中间按钮溢出效果(Android_iOS)/</id>
    <published>2018-02-04T16:00:00.000Z</published>
    <updated>2018-02-05T02:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="以前写过一篇文章是基于react-native-tab-navigator-封装Tabbar，由于RN版本的不断更新，react-navigation，自17年1月开源以来就备受关注，Fb推荐使用库，并且在React-Native0-44中已将Navigator删除。本文将以-react-navigation-–-1-0-0-beta-27-React-Native-–-0-52-2-封装实现导航栏的溢出效果！"><a href="#以前写过一篇文章是基于react-native-tab-navigator-封装Tabbar，由于RN版本的不断更新，react-navigation，自17年1月开源以来就备受关注，Fb推荐使用库，并且在React-Native0-44中已将Navigator删除。本文将以-react-navigation-–-1-0-0-beta-27-React-Native-–-0-52-2-封装实现导航栏的溢出效果！" class="headerlink" title="以前写过一篇文章是基于react-native-tab-navigator 封装Tabbar，由于RN版本的不断更新，react-navigation，自17年1月开源以来就备受关注，Fb推荐使用库，并且在React Native0.44中已将Navigator删除。本文将以 react-navigation – 1.0.0-beta.27 / React-Native – 0.52.2  封装实现导航栏的溢出效果！"></a>以前写过一篇文章是基于react-native-tab-navigator 封装Tabbar，由于RN版本的不断更新，react-navigation，自17年1月开源以来就备受关注，Fb推荐使用库，并且在React Native0.44中已将Navigator删除。本文将以 react-navigation – 1.0.0-beta.27 / React-Native – 0.52.2  封装实现导航栏的溢出效果！</h2><h4 id="RN实现按钮凸出效果，在iOS移动端可以根据调整按钮上下的布局就能实现溢出效果的样式，Android端不支持溢出效果，所有要兼容Android端，则需要使用一个更高的容器试图支持一个大图标按钮-使用绝对布局实现该效果"><a href="#RN实现按钮凸出效果，在iOS移动端可以根据调整按钮上下的布局就能实现溢出效果的样式，Android端不支持溢出效果，所有要兼容Android端，则需要使用一个更高的容器试图支持一个大图标按钮-使用绝对布局实现该效果" class="headerlink" title="RN实现按钮凸出效果，在iOS移动端可以根据调整按钮上下的布局就能实现溢出效果的样式，Android端不支持溢出效果，所有要兼容Android端，则需要使用一个更高的容器试图支持一个大图标按钮(使用绝对布局实现该效果)!"></a>RN实现按钮凸出效果，在iOS移动端可以根据调整按钮上下的布局就能实现溢出效果的样式，Android端不支持溢出效果，所有要兼容Android端，则需要使用一个更高的容器试图支持一个大图标按钮(使用绝对布局实现该效果)!</h4><h2 id="NEXT：实现代码"><a href="#NEXT：实现代码" class="headerlink" title="NEXT：实现代码"></a>NEXT：实现代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by zhangyanlf on 2018/2/2.</span><br><span class="line"> */</span><br><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">    AppRegistry,</span><br><span class="line">    Platform,</span><br><span class="line">    StyleSheet,</span><br><span class="line">    Text,</span><br><span class="line">    View,</span><br><span class="line">    TouchableOpacity,</span><br><span class="line">    NativeModules,</span><br><span class="line">    ImageBackground,</span><br><span class="line">    DeviceEventEmitter</span><br><span class="line">&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">export default class Tab extends Component &#123;</span><br><span class="line">    renderItem = (route, index) =&gt; &#123;</span><br><span class="line">        const &#123;</span><br><span class="line">            navigation,</span><br><span class="line">            jumpToIndex,</span><br><span class="line">        &#125; = this.props;</span><br><span class="line"></span><br><span class="line">        const focused = index === navigation.state.index;</span><br><span class="line">        const color = focused ? this.props.activeTintColor : this.props.inactiveTintColor;</span><br><span class="line">        let TabScene = &#123;</span><br><span class="line">            focused:focused,</span><br><span class="line">            route:route,</span><br><span class="line">            tintColor:color</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        if(index === 2)&#123;</span><br><span class="line">            return (&lt;View</span><br><span class="line">                    key=&#123;route.key&#125;</span><br><span class="line">                    style=&#123;[styles.tabItem,&#123;backgroundColor:&apos;transparent&apos;&#125;]&#125;&gt;</span><br><span class="line">                &lt;/View&gt;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return (</span><br><span class="line">            &lt;TouchableOpacity</span><br><span class="line">                key=&#123;route.key&#125;</span><br><span class="line">                style=&#123;styles.tabItem&#125;</span><br><span class="line">                onPress=&#123;() =&gt; jumpToIndex(index)&#125;</span><br><span class="line">            &gt;</span><br><span class="line">                &lt;View</span><br><span class="line">                    style=&#123;styles.tabItem&#125;&gt;</span><br><span class="line">                    &#123;this.props.renderIcon(TabScene)&#125;</span><br><span class="line">                    &lt;Text style=&#123;&#123; ...styles.tabText,marginTop:SCALE(10),color &#125;&#125;&gt;&#123;this.props.getLabel(TabScene)&#125;&lt;/Text&gt;</span><br><span class="line">                &lt;/View&gt;</span><br><span class="line">            &lt;/TouchableOpacity&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;;</span><br><span class="line">    render()&#123;</span><br><span class="line">        const &#123;navigation,jumpToIndex&#125; = this.props;</span><br><span class="line">        const &#123;routes,&#125; = navigation.state;</span><br><span class="line">        const focused = 2 === navigation.state.index;</span><br><span class="line">        const color = focused ? this.props.activeTintColor : this.props.inactiveTintColor;</span><br><span class="line">        let TabScene = &#123;</span><br><span class="line">            focused:focused,</span><br><span class="line">            route:routes[2],</span><br><span class="line">            tintColor:color</span><br><span class="line">        &#125;;</span><br><span class="line">        return (&lt;View style=&#123;&#123;width:WIDTH&#125;&#125;&gt;</span><br><span class="line">            &lt;View style=&#123;styles.tab&#125;&gt;</span><br><span class="line">                &#123;routes &amp;&amp; routes.map((route,index) =&gt; this.renderItem(route, index))&#125;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">            &#123;/*设置中间按钮凸出样式  使用绝对定位*/&#125;</span><br><span class="line">            &lt;TouchableOpacity</span><br><span class="line">                key=&#123;&quot;centerView&quot;&#125;</span><br><span class="line"></span><br><span class="line">                style=&#123;[styles.tabItem,&#123;position:&apos;absolute&apos;,bottom:0,left:(WIDTH-SCALE(100))/2,right:WIDTH-SCALE(100),height:SCALE(120)&#125;]&#125;</span><br><span class="line">                onPress=&#123;() =&gt; jumpToIndex(2)&#125;&gt;</span><br><span class="line">                &lt;View</span><br><span class="line">                    style=&#123;styles.tabItem&#125;&gt;</span><br><span class="line">                    &#123;this.props.renderIcon(TabScene)&#125;</span><br><span class="line">                    &lt;Text style=&#123;&#123; ...styles.tabText,marginTop:SCALE(10),color &#125;&#125;&gt;&#123;this.props.getLabel(TabScene)&#125;&lt;/Text&gt;</span><br><span class="line">                &lt;/View&gt;</span><br><span class="line">            &lt;/TouchableOpacity&gt;</span><br><span class="line">        &lt;/View&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const styles = &#123;</span><br><span class="line">    tab:&#123;</span><br><span class="line">        width:WIDTH,</span><br><span class="line">        backgroundColor:&apos;transparent&apos;,</span><br><span class="line">        flexDirection:&apos;row&apos;,</span><br><span class="line">        justifyContent:&apos;space-around&apos;,</span><br><span class="line">        alignItems:&apos;flex-end&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    tabItem:&#123;</span><br><span class="line">        height:SCALE(80),</span><br><span class="line">        width:SCALE(100),</span><br><span class="line">        alignItems:&apos;center&apos;,</span><br><span class="line">        justifyContent:&apos;center&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    tabText:&#123;</span><br><span class="line">        marginTop:SCALE(13),</span><br><span class="line">        fontSize:FONT(10),</span><br><span class="line">        color:&apos;#7b7b7b&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    tabTextChoose:&#123;</span><br><span class="line">        color:&apos;#f3474b&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    tabImage:&#123;</span><br><span class="line">        width:SCALE(42),</span><br><span class="line">        height:SCALE(42),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="效果图展示："><a href="#效果图展示：" class="headerlink" title="效果图展示："></a>效果图展示：</h4><p><img src="http://img.blog.csdn.net/20180205095814165?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="iOS效果图"></p><p><img src="http://img.blog.csdn.net/20180205095908530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Android效果图"></p><h4 id="想要了解-react-navigation-如何使用也可以查看我的上一篇文章react-navigation使用技巧-也可以查看react-navigation-中文翻译：-https-www-reactnavigation-org-cn。"><a href="#想要了解-react-navigation-如何使用也可以查看我的上一篇文章react-navigation使用技巧-也可以查看react-navigation-中文翻译：-https-www-reactnavigation-org-cn。" class="headerlink" title="想要了解 react-navigation 如何使用也可以查看我的上一篇文章react-navigation使用技巧,也可以查看react-navigation 中文翻译： https://www.reactnavigation.org.cn。"></a>想要了解 react-navigation 如何使用也可以查看我的<a href="http://zhangyanlf.cn/2017/11/07/react-navigation%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/" target="_blank" rel="noopener">上一篇文章react-navigation使用技巧</a>,也可以查看react-navigation 中文翻译： <a href="https://www.reactnavigation.org.cn" target="_blank" rel="noopener">https://www.reactnavigation.org.cn</a>。</h4><h2 id="PS-运用-react-navigation-是问题记录-（遇到的问题后续还会持续更新）"><a href="#PS-运用-react-navigation-是问题记录-（遇到的问题后续还会持续更新）" class="headerlink" title="PS: 运用 react-navigation 是问题记录 （遇到的问题后续还会持续更新）"></a>PS: 运用 react-navigation 是问题记录 （遇到的问题后续还会持续更新）</h2><h4 id="1-Android-导航栏文字居中效果"><a href="#1-Android-导航栏文字居中效果" class="headerlink" title="1.Android 导航栏文字居中效果"></a>1.Android 导航栏文字居中效果</h4><p>node_modules – react-navigation – src – views – Header – Header.js 修改368行 将 alignItems: Platform.OS === ‘ios’ ? ‘center’ : ‘flex-start’ 改为 ‘center’即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">        bottom: 0,</span><br><span class="line">        left: TITLE_OFFSET,</span><br><span class="line">        right: TITLE_OFFSET,</span><br><span class="line">        top: 0,</span><br><span class="line">        position: &apos;absolute&apos;,</span><br><span class="line">        alignItems: &apos;center&apos;//Platform.OS === &apos;ios&apos; ? &apos;center&apos; : &apos;flex-start&apos;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;以前写过一篇文章是基于react-native-tab-navigator-封装Tabbar，由于RN版本的不断更新，react-navigation，自17年1月开源以来就备受关注，Fb推荐使用库，并且在React-Native0-44中已将Navigator删
      
    
    </summary>
    
    
      <category term="React Native" scheme="https://zhangyanlf.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>react-navigation使用技巧</title>
    <link href="https://zhangyanlf.top/2017/11/07/react-navigation%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://zhangyanlf.top/2017/11/07/react-navigation使用技巧/</id>
    <published>2017-11-06T16:00:00.000Z</published>
    <updated>2017-12-22T07:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是基于最新的react-navigation^1.0.0-beta.13来书写的。</p><p>如果遇到什么问题可以在评论区回复，或者加QQ群397885169讨论:</p><h3 id="识兔，一款用来识别图片的开源项目，里面有很多知识点，看看会对你学习RN有很大帮助"><a href="#识兔，一款用来识别图片的开源项目，里面有很多知识点，看看会对你学习RN有很大帮助" class="headerlink" title="识兔，一款用来识别图片的开源项目，里面有很多知识点，看看会对你学习RN有很大帮助"></a><a href="https://github.com/RabbitDream/ShiTu" target="_blank" rel="noopener">识兔，一款用来识别图片的开源项目，里面有很多知识点，看看会对你学习RN有很大帮助</a></h3><h3 id="ReactNavigationDemo"><a href="#ReactNavigationDemo" class="headerlink" title="ReactNavigationDemo"></a><a href="https://github.com/SurpassRabbit/ReactNavigationDemo" target="_blank" rel="noopener">ReactNavigationDemo</a></h3><h2 id="什么是react-navigation"><a href="#什么是react-navigation" class="headerlink" title="什么是react-navigation?"></a>什么是react-navigation?</h2><p>react-native从开源至今，一直存在几个无法解决的毛病，偶尔就会复发让人隐隐作痛，提醒你用的不是原生，其中包括列表的复用问题，导航跳转不流畅的问题等等。<br>终于facebook坐不住了，在前一段时间开始推荐使用react-navigation，并且在0.44发布的时将之前一直存在的Navigator废弃了。<br>react-navigation是致力于解决导航卡顿，数据传递，Tabbar和navigator布局，支持redux。虽然现在功能还不完善，但基本是可以在项目中推荐使用的。</p><hr><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p> react-navigation分为三个部分。</p><ul><li><p>StackNavigator类似顶部导航条，用来跳转页面和传递参数。</p></li><li><p>TabNavigator类似底部标签栏，用来区分模块。</p></li><li><p>DrawerNavigator抽屉，类似从App左侧滑出一个页面，在这里不做讲解。<br>下面会分开讲解官网提供的配置方法，但顺序可能会官网不一样。</p></li></ul><hr><h2 id="screenProps"><a href="#screenProps" class="headerlink" title="screenProps"></a>screenProps</h2><p> 之前是没有介绍这个属性的，但经过这么久发现，很多人都不知道这个属性，不知道它能干嘛，在这里我就简单的介绍下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 假设App就是项目中的入口文件，如果还不知道，可以看下Demo，在这里我将主题色通过screenProps属性修改成&apos;red&apos;</span><br><span class="line">&lt;App screenProps=&#123;&#123;themeColor:&apos;red&apos;&#125;&#125;&gt;</span><br><span class="line"></span><br><span class="line">// 在页面中就可以通过screenProps来直接改变了，这个在Demo</span><br><span class="line">中的Test2里面</span><br><span class="line"></span><br><span class="line">static navigationOptions = (&#123;navigation,screenProps&#125;) =&gt; (&#123;</span><br><span class="line">        // 这里面的属性和App.js的navigationOptions是一样的。</span><br><span class="line">                headerStyle:&#123;backgroundColor:screenProps?</span><br><span class="line">                screenProps.themeColor:</span><br><span class="line">                &apos;#4ECBFC&apos;&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="StackNavigator-基础用法-属性介绍"><a href="#StackNavigator-基础用法-属性介绍" class="headerlink" title="StackNavigator 基础用法/属性介绍"></a>StackNavigator 基础用法/属性介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const MyApp = StackNavigator(&#123;</span><br><span class="line">    // 对应界面名称</span><br><span class="line">    MyTab: &#123;</span><br><span class="line">        screen: MyTab,</span><br><span class="line">    &#125;,</span><br><span class="line">    Detail: &#123;</span><br><span class="line">        screen: Detail,</span><br><span class="line">        navigationOptions:&#123;</span><br><span class="line">            headerTitle:&apos;详情&apos;,</span><br><span class="line">            headerBackTitle:null,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    headerMode: &apos;screen&apos;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="导航配置"><a href="#导航配置" class="headerlink" title="导航配置"></a>导航配置</h2><p>iscreen：对应界面名称，需要填入import之后的页面。</p><p>navigationOptions：配置StackNavigator的一些属性。</p><ul><li><p>title：标题，如果设置了这个导航栏和标签栏的title就会变成一样的，所以不推荐使用这个方法。</p></li><li><p>header：可以设置一些导航的属性，当然如果想隐藏顶部导航条只要将这个属性设置为null就可以了</p></li><li><p>headerTitle：设置导航栏标题，推荐用这个方法。</p></li><li><p>headerBackTitle：设置跳转页面左侧返回箭头后面的文字，默认是上一个页面的标题。可以自定义，也可以设置为null</p></li><li><p>headerTruncatedBackTitle：设置当上个页面标题不符合返回箭头后的文字时，默认改成”返回”。（上个页面的标题过长，导致显示不下，所以改成了短一些的。）</p></li><li><p>headerRight：设置导航条右侧。可以是按钮或者其他。</p></li><li><p>headerLeft：设置导航条左侧。可以是按钮或者其他。</p></li><li><p>headerStyle：设置导航条的样式。背景色，宽高等。如果想去掉安卓导航条底部阴影可以添加elevation: 0，iOS下用shadowOpacity: 0。</p></li><li><p>headerTitleStyle：设置导航条文字样式。安卓上如果要设置文字居中，只要添加alignSelf:’center’就可以了。在安卓上会遇到，如果左边有返回箭头导致文字还是没有居中的问题，最简单的解决思路就是在右边也放置一个空的按钮。</p></li><li><p>headerBackTitleStyle：设置导航条返回文字样式。</p></li><li><p>headerTintColor：设置导航栏文字颜色。总感觉和上面重叠了。</p></li><li><p>headerPressColorAndroid：安卓独有的设置颜色纹理，需要安卓版本大于5.0</p></li><li><p>gesturesEnabled：是否支持滑动返回收拾，iOS默认支持，安卓默认关闭</p></li><li><p>gestureResponseDistance：对象覆盖触摸从屏幕边缘开始的距离，以识别手势。 它需要以下属性：</p><ul><li>horizontal - number - 水平方向的距离 默认为25。</li><li>vertical - number - 垂直方向的距离 默认为135。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 设置滑动返回的距离</span><br><span class="line">gestureResponseDistance:&#123;horizontal:300&#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>注：beta13新出的东西，挺有意思，以后可以手动控制返回了</p><hr><h2 id="导航视觉效果"><a href="#导航视觉效果" class="headerlink" title="导航视觉效果"></a>导航视觉效果</h2><p>mode：定义跳转风格。</p><ul><li>card：使用iOS和安卓默认的风格。</li><li>modal：iOS独有的使屏幕从底部画出。类似iOS的present效果</li></ul><p>headerMode：边缘滑动返回上级页面时动画效果。</p><ul><li>float：iOS默认的效果，可以看到一个明显的过渡动画。</li><li>screen：滑动过程中，整个页面都会返回。</li><li>none：没有动画</li></ul><p>cardStyle：自定义设置跳转效果</p><p>transitionConfig： 自定义设置滑动返回的配置。</p><p>onTransitionStart：当转换动画即将开始时被调用的功能。</p><p>onTransitionEnd：当转换动画完成，将被调用的功能。</p><p>path：路由中设置的路径的覆盖映射配置。</p><p>initialRouteName：设置默认的页面组件，必须是上面已注册的页面组件。</p><p>initialRouteParams：初始路由的参数。</p><p>path:path属性适用于其他app或浏览器使用url打开本app并进入指定页面。path属性用于声明一个界面路径，例如：【/pages/Home】。此时我们可以在手机浏览器中输入：app名称://pages/Home来启动该App，并进入Home界面。</p><p>将此处的 yourApplicationId 替换为你的项目的包名；yourAppKey 替换成你在官网上申请的应用的 AppKey。<br>检查一下 dependencies 中有没有添加 jpush-react-native 及 jcore-react-native 这两个依赖。</p><hr><h2 id="TabNavigator-基础用法-属性介绍"><a href="#TabNavigator-基础用法-属性介绍" class="headerlink" title="TabNavigator 基础用法/属性介绍"></a>TabNavigator 基础用法/属性介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const MyTab = TabNavigator(&#123;</span><br><span class="line">    ShiTu: &#123;</span><br><span class="line">        screen: ShiTu,</span><br><span class="line">        navigationOptions:&#123;</span><br><span class="line">            tabBarLabel: &apos;识兔&apos;,</span><br><span class="line">            tabBarIcon: (&#123;tintColor&#125;) =&gt; (</span><br><span class="line">                &lt;Image</span><br><span class="line">                    source=&#123;&#123;uri : &apos;识兔&apos;&#125;&#125;</span><br><span class="line">                    style=&#123;[tabBarIcon, &#123;tintColor: tintColor&#125;]&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            ),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">    tabBarPosition: &apos;bottom&apos;,</span><br><span class="line">    swipeEnabled:false,</span><br><span class="line">    animationEnabled:false,</span><br><span class="line">    tabBarOptions: &#123;</span><br><span class="line">        style: &#123;</span><br><span class="line">            height:49</span><br><span class="line">        &#125;,</span><br><span class="line">        activeBackgroundColor:&apos;white&apos;,</span><br><span class="line">        activeTintColor:&apos;#4ECBFC&apos;,</span><br><span class="line">        inactiveBackgroundColor:&apos;white&apos;,</span><br><span class="line">        inactiveTintColor:&apos;#aaa&apos;,</span><br><span class="line">        showLabel:false,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="屏幕导航配置"><a href="#屏幕导航配置" class="headerlink" title="屏幕导航配置"></a>屏幕导航配置</h2><p>screen：和导航的功能是一样的，对应界面名称，可以在其他页面通过这个screen传值和跳转。<br>navigationOptions：配置TabNavigator的一些属性</p><ul><li><p>title：标题，会同时设置导航条和标签栏的title，还是不推荐这种方式。</p></li><li><p>tabBarVisible：是否隐藏标签栏。默认不隐藏(true)</p></li><li><p>tabBarIcon：设置标签栏的图标。需要给每个都设置。</p></li><li><p>tabBarLabel：设置标签栏的title。推荐这个方式。</p></li><li><p>tabBarOnPress：设置tabBar的点击事件，内部提供了两个属性，一个方法({ route, index },jumpToIndex)。</p><blockquote><p>beta13新添加的方法，使用方式有些奇葩，如果想要使用，请参照下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    /tabBarOnPress:((&#123; route, index &#125;,jumpToIndex)=&gt;&#123;</span><br><span class="line">    // console.log(route);        </span><br><span class="line">    // alert(index);</span><br><span class="line">    // 只有调用jumpToIndex方法之后才会真正的跳转页面。</span><br><span class="line">    jumpToIndex(index);</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><h2 id="标签栏配置"><a href="#标签栏配置" class="headerlink" title="标签栏配置"></a>标签栏配置</h2><p>tabBarPosition：设置tabbar的位置，iOS默认在底部，安卓默认在顶部。（属性值：’top’，’bottom’）</p><p>swipeEnabled：是否允许在标签之间进行滑动。</p><p>animationEnabled：是否在更改标签时显示动画。</p><p>lazy：是否根据需要懒惰呈现标签，而不是提前制作，意思是在app打开的时候将底部标签栏全部加载，默认false,推荐改成true哦。</p><p>initialRouteName： 设置默认的页面组件</p><p>backBehavior：按 back 键是否跳转到第一个Tab(首页)， none 为不跳转</p><p>tabBarOptions：配置标签栏的一些属性</p><hr><h3 id="iOS属性"><a href="#iOS属性" class="headerlink" title="iOS属性"></a>iOS属性</h3><ul><li><p>activeTintColor：label和icon的前景色 活跃状态下（选中）。</p></li><li><p>activeBackgroundColor：label和icon的背景色 活跃状态下（选中） 。</p></li><li><p>inactiveTintColor：label和icon的前景色 不活跃状态下(未选中)。</p></li><li><p>inactiveBackgroundColor：label和icon的背景色 不活跃状态下（未选中）。</p></li><li><p>showLabel：是否显示label，默认开启。</p></li><li><p>style：tabbar的样式。</p></li><li><p>labelStyle：label的样式。</p></li></ul><hr><h3 id="安卓属性"><a href="#安卓属性" class="headerlink" title="安卓属性"></a>安卓属性</h3><ul><li><p>activeTintColor：label和icon的前景色 活跃状态下（选中） 。</p></li><li><p>inactiveTintColor：label和icon的前景色 不活跃状态下(未选中)。</p></li><li><p>showIcon：是否显示图标，默认关闭。</p></li><li><p>showLabel：是否显示label，默认开启。</p></li><li><p>style：tabbar的样式。</p></li><li><p>labelStyle：label的样式。</p></li><li><p>upperCaseLabel：是否使标签大写，默认为true。</p></li><li><p>pressColor：material涟漪效果的颜色（安卓版本需要大于5.0）。</p></li><li><p>pressOpacity：按压标签的透明度变化（安卓版本需要小于5.0）。</p></li><li><p>scrollEnabled：是否启用可滚动选项卡。</p></li><li><p>tabStyle：tab的样式。</p></li><li><p>indicatorStyle：标签指示器的样式对象（选项卡底部的行）。安卓底部会多出一条线，可以将height设置为0来暂时解决这个问题。</p></li><li><p>labelStyle：label的样式。</p></li><li><p>iconStyle：图标的样式。</p><blockquote><p>ps：很多人问我,为什么安卓上的tabbar文字会下移, 是因为安卓比iOS多了一个属性,就是iconStyle,通过设置labelStyle和iconStyle两个样式,外加style的高度,来使效果更佳合理.</p></blockquote></li></ul><hr><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">navigate(&apos;Detail&apos;,&#123;</span><br><span class="line">                   title:&apos;图片详情&apos;,</span><br><span class="line">                   url:item.url,</span><br><span class="line">                   &#125;);</span><br></pre></td></tr></table></figure><p>Detail：在StackNavigator中注册的页面，需要一一对应，才能跳转到相应的页面</p><p>title：在跳转的页面可以通过this.props.navigation.state.params.title获取到这个参数。当然这个参数可以随便填写，都可以通过this.props.navigation.state.params.xxx获取。</p><hr><h3 id="回调传参"><a href="#回调传参" class="headerlink" title="回调传参"></a>回调传参</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">navigate(&apos;Detail&apos;,&#123;</span><br><span class="line">                   // 跳转的时候携带一个参数去下个页面</span><br><span class="line">                   callback: (data)=&gt;&#123;</span><br><span class="line">                         console.log(data); // 打印值为：&apos;回调参数&apos;</span><br><span class="line">                     &#125;</span><br><span class="line">                   &#125;);</span><br></pre></td></tr></table></figure><p>const {navigate,goBack,state} = this.props.navigation;<br>// 在第二个页面,在goBack之前,将上个页面的方法取到,并回传参数,这样回传的参数会重走render方法<br>state.params.callback(‘回调参数’);<br>goBack();</p><hr><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>项目中基本是没可能用自带的那个导航条的，自带导航条左侧的按钮永远是蓝色的，如果我们需要更改按钮颜色，就需要用到自定义的功能了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const StackOptions = (&#123;navigation&#125;) =&gt; &#123;</span><br><span class="line">    console.log(navigation);</span><br><span class="line">    let &#123;state,goBack&#125; = navigation;</span><br><span class="line">    </span><br><span class="line">    // 用来判断是否隐藏或显示header</span><br><span class="line">    const visible= state.params.isVisible;</span><br><span class="line">    let header;</span><br><span class="line">    if (visible === true)&#123;</span><br><span class="line">        header = null;</span><br><span class="line">    &#125;</span><br><span class="line">    const headerStyle = &#123;backgroundColor:&apos;#4ECBFC&apos;&#125;;</span><br><span class="line">    const headerTitle = state.params.title;</span><br><span class="line">    const headerTitleStyle = &#123;fontSize:FONT_SIZE(20),color:&apos;white&apos;,fontWeight:&apos;500&apos;&#125;</span><br><span class="line">    const headerBackTitle = false;</span><br><span class="line">    const headerLeft = (</span><br><span class="line">        &lt;Button</span><br><span class="line">            isCustom=&#123;true&#125;</span><br><span class="line">            customView=&#123;</span><br><span class="line">                            &lt;Icon</span><br><span class="line">                                name=&apos;ios-arrow-back&apos;</span><br><span class="line">                                size=&#123;30&#125;</span><br><span class="line">                                color=&apos;white&apos;</span><br><span class="line">                                style=&#123;&#123;marginLeft:13&#125;&#125;</span><br><span class="line">                            /&gt;</span><br><span class="line">                        &#125;</span><br><span class="line">            onPress=&#123;()=&gt;&#123;goBack()&#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">    );</span><br><span class="line">    return &#123;headerStyle,headerTitle,headerTitleStyle,headerBackTitle,headerLeft,header&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="然后通过下面的方法调用就可以自定制导航了。"><a href="#然后通过下面的方法调用就可以自定制导航了。" class="headerlink" title="然后通过下面的方法调用就可以自定制导航了。"></a>然后通过下面的方法调用就可以自定制导航了。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const MyApp = StackNavigator(&#123;</span><br><span class="line">    MyTab: &#123;</span><br><span class="line">        screen: MyTab,</span><br><span class="line">    &#125;,</span><br><span class="line">    Detail: &#123;</span><br><span class="line">        screen: Detail,</span><br><span class="line">        navigationOptions: (&#123;navigation&#125;) =&gt; StackOptions(&#123;navigation&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">)&#125;;</span><br></pre></td></tr></table></figure><p>在页面中使用的时候，在跳转页面的时候需要传递title参数，才能看到效果哦。</p><hr><h3 id="自定义tabbar"><a href="#自定义tabbar" class="headerlink" title="自定义tabbar"></a>自定义tabbar</h3><p>早上有人问我，tabbar的图标可不可以使用原图，选中状态下可不可以设置其他图标。研究了一下官方文档，发现tabBarIcon除了tintColor还有另一个属性，用来判断选中状态的focused。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tabBarIcon: (&#123;tintColor,focused&#125;) =&gt; (</span><br><span class="line">                focused</span><br><span class="line">                    ?</span><br><span class="line">                    &lt;Image</span><br><span class="line">                        source=&#123;&#123;uri : &apos;识兔&apos;&#125;&#125;</span><br><span class="line">                        style=&#123;tabBarIcon&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                    :</span><br><span class="line">                    &lt;Image</span><br><span class="line">                        source=&#123;&#123;uri : &apos;干货&apos;&#125;&#125;</span><br><span class="line">                        style=&#123;[tabBarIcon, &#123;tintColor: tintColor&#125;]&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">            ),</span><br></pre></td></tr></table></figure></p><p>通过判断focused，选中状态下使用识兔图标，未选中状态使用干货图标。<br>如果想使用图标原来的样子，那就将style的tintColor去掉，这样就会显示图标原本的颜色。</p><hr><h3 id="再封装"><a href="#再封装" class="headerlink" title="再封装"></a>再封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">export const TabOptions = (tabBarTitle,normalImage,selectedImage,navTitle) =&gt; &#123;</span><br><span class="line">    // console.log(navigation);</span><br><span class="line">    const tabBarLabel = tabBarTitle;</span><br><span class="line">    console.log(navTitle);</span><br><span class="line">    const tabBarIcon = ((&#123;tintColor,focused&#125;)=&gt; &#123;</span><br><span class="line">        return(</span><br><span class="line">            focused</span><br><span class="line">                ?</span><br><span class="line">                &lt;Image</span><br><span class="line">                    source=&#123;&#123;uri : normalImage&#125;&#125;</span><br><span class="line">                    style=&#123;[TabBarIcon, &#123;tintColor: tintColor&#125;]&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                :</span><br><span class="line">                &lt;Image</span><br><span class="line">                    source=&#123;&#123;uri : selectedImage&#125;&#125;</span><br><span class="line">                    style=&#123;[TabBarIcon, &#123;tintColor: tintColor&#125;]&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;);</span><br><span class="line">    const headerTitle = navTitle;</span><br><span class="line">    const headerTitleStyle = &#123;fontSize:FONT_SIZE(20),color:&apos;white&apos;&#125;;</span><br><span class="line">    // header的style</span><br><span class="line">    const headerStyle = &#123;backgroundColor:&apos;#4ECBFC&apos;&#125;;</span><br><span class="line">    return &#123;tabBarLabel,tabBarIcon,headerTitle,headerTitleStyle,headerStyle&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="在static中使用this方法"><a href="#在static中使用this方法" class="headerlink" title="在static中使用this方法"></a>在static中使用this方法</h3><p>我之前文章中是将navaigationOptions的方法写在了app.js中，没有在页面中通过static navaigationOptions来初始化页面，这段时间刚好有人问，所以在这里就写一下该怎么弄。</p><p>####首先需要在componentDidMount(){}中动态的添加点击事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">属性给params</span><br><span class="line">componentDidMount()&#123;</span><br><span class="line"></span><br><span class="line">    this.props.navigation.setParams(&#123;</span><br><span class="line">        title:&apos;自定义Header&apos;,</span><br><span class="line">        navigatePress:this.navigatePress</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">navigatePress = () =&gt; &#123;</span><br><span class="line">    alert(&apos;点击headerRight&apos;);</span><br><span class="line">    console.log(this.props.navigation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="接下来就可以通过params方法来获取点击事件了"><a href="#接下来就可以通过params方法来获取点击事件了" class="headerlink" title="接下来就可以通过params方法来获取点击事件了"></a>接下来就可以通过params方法来获取点击事件了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static navigationOptions = (&#123; navigation, screenProps &#125;) =&gt; (&#123;</span><br><span class="line">        title: navigation.state.params?navigation.state.params.title:null,</span><br><span class="line">        headerRight:(</span><br><span class="line">            &lt;Text onPress=&#123;navigation.state.params?navigation.state.params.navigatePress:null&#125;&gt;</span><br><span class="line">                返回</span><br><span class="line">            &lt;/Text&gt;</span><br><span class="line">        )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="让安卓实现push动画"><a href="#让安卓实现push动画" class="headerlink" title="让安卓实现push动画"></a>让安卓实现push动画</h3><p>之前我群里的讨论怎么让安卓实现类似iOS的push动画，后来翻看官方issues的时候，真的发现了实现push动画的代码，在这里共享下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 先引入这个方法</span><br><span class="line">import CardStackStyleInterpolator from &apos;react-navigation/src/views/CardStackStyleInterpolator&apos;;</span><br><span class="line"></span><br><span class="line">// 在StackNavigator配置headerMode的地方，使用transitionConfig添加</span><br><span class="line">&#123;</span><br><span class="line">    headerMode: &apos;screen&apos;,</span><br><span class="line">    transitionConfig:()=&gt;(&#123;</span><br><span class="line">        screenInterpolator:CardStackStyleInterpolator.forHorizontal,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="关于goBack返回指定页面"><a href="#关于goBack返回指定页面" class="headerlink" title="关于goBack返回指定页面"></a>关于goBack返回指定页面</h2><p>react-navigation是提供了goBack()到指定页面的方法的，那就是在goBack()中添加一个参数，但当你使用goBack(‘Main’)的时候，你会发现并没有跳转，原因是react-navigation默认goBack()中的参数是系统随机分配的key，而不是手动设置的routeName，而方法内部又没有提供可以获得key的方法，所以这里只能通过修改源码将key换成routeName了。</p><p>下面的内容直接引用了hello老文的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">把项目/node_modules/react-navigation/src/routers/StackRouter.js文件里的 </span><br><span class="line">const backRoute = state.routes.find((route: *) =&gt; route.key === action.key); </span><br><span class="line">改成 const backRoute = state.routes.find(route =&gt; route.routeName === action.key);</span><br><span class="line"></span><br><span class="line">但不是很完美, 这里的component要填想返回的组件的前一个组件的routeName, 比如你的栈里顺序是home1, home2, home3, home4, 在home4里要返回home2, 使用this.props.navigation.goBack(&apos;home3&apos;);; 并且又会带出一个问题: goBack()方法没反应了, 必须加个null进去, 写成goBack(null)...</span><br></pre></td></tr></table></figure></p><h3 id="关于goBack返回指定页面的修改完善版"><a href="#关于goBack返回指定页面的修改完善版" class="headerlink" title="关于goBack返回指定页面的修改完善版"></a>关于goBack返回指定页面的修改完善版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">if (action.type === NavigationActions.BACK) &#123;</span><br><span class="line">    let backRouteIndex = null;</span><br><span class="line">    if (action.key) &#123;</span><br><span class="line"></span><br><span class="line">      const backRoute = state.routes.find(</span><br><span class="line">        /* $FlowFixMe */</span><br><span class="line">        /* 修改源码 */</span><br><span class="line">        route =&gt; route.routeName === action.key</span><br><span class="line">        /* (route: *) =&gt; route.key === action.key */</span><br><span class="line">      );</span><br><span class="line">      /* $FlowFixMe */</span><br><span class="line">      console.log(&apos;backRoute =====&apos;,backRoute);</span><br><span class="line">      backRouteIndex = state.routes.indexOf(backRoute);</span><br><span class="line">      console.log(&apos;backRoute =====&apos;,backRouteIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    if (backRouteIndex == null) &#123;</span><br><span class="line">      return StateUtils.pop(state);</span><br><span class="line">    &#125;</span><br><span class="line">    if (backRouteIndex &gt;= 0) &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        routes: state.routes.slice(0, backRouteIndex+1),</span><br><span class="line">        index: backRouteIndex - 1 + 1,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>感谢群友conan的贡献，将源码改成上面的样子，就可以使用goBack()返回指定页面了，这样的优点不言而喻，但缺点就是每次调用goBack()，如果只是简单的返回上一页需要加上null参数，类似这样goBack(null)，</p><blockquote><p>如果这样修改，在滑动返回的时候，会有很大几率让项目卡死，请注意使用该方法，推荐集成redux。</p></blockquote><hr><h3 id="关于快速点击会导致多次跳转的问题解决办法"><a href="#关于快速点击会导致多次跳转的问题解决办法" class="headerlink" title="关于快速点击会导致多次跳转的问题解决办法"></a>关于快速点击会导致多次跳转的问题解决办法</h3><p>感谢群友编程大叔的贡献，如果想解决快速点击跳转的问题，需要修改部分源码。</p><p>修改react-navigation目录下，scr文件夹中的addNavigationHelpers.js文件，可以直接替换成下面的文本，也可以查看<a href="https://github.com/react-community/react-navigation/pull/1348/files" target="_blank" rel="noopener">原版链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">export default function&lt;S: *&gt;(navigation: NavigationProp&lt;S, NavigationAction&gt;) &#123;</span><br><span class="line">  // 添加点击判断</span><br><span class="line">  let debounce = true;</span><br><span class="line">  return &#123;</span><br><span class="line">      ...navigation,</span><br><span class="line">      goBack: (key?: ?string): boolean =&gt;</span><br><span class="line">          navigation.dispatch(</span><br><span class="line">              NavigationActions.back(&#123;</span><br><span class="line">                  key: key === undefined ? navigation.state.key : key,</span><br><span class="line">              &#125;),</span><br><span class="line">          ),</span><br><span class="line">      navigate: (routeName: string,</span><br><span class="line">                 params?: NavigationParams,</span><br><span class="line">                 action?: NavigationAction,): boolean =&gt; &#123;</span><br><span class="line">          if (debounce) &#123;</span><br><span class="line">              debounce = false;</span><br><span class="line">              navigation.dispatch(</span><br><span class="line">                  NavigationActions.navigate(&#123;</span><br><span class="line">                      routeName,</span><br><span class="line">                      params,</span><br><span class="line">                      action,</span><br><span class="line">                  &#125;),</span><br><span class="line">              );</span><br><span class="line">              setTimeout(</span><br><span class="line">                  () =&gt; &#123;</span><br><span class="line">                      debounce = true;</span><br><span class="line">                  &#125;,</span><br><span class="line">              500,</span><br><span class="line">              );</span><br><span class="line">              return true;</span><br><span class="line">          &#125;</span><br><span class="line">          return false;</span><br><span class="line">      &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * For updating current route params. For example the nav bar title and</span><br><span class="line">     * buttons are based on the route params.</span><br><span class="line">     * This means `setParams` can be used to update nav bar for example.</span><br><span class="line">     */</span><br><span class="line">    setParams: (params: NavigationParams): boolean =&gt;</span><br><span class="line">      navigation.dispatch(</span><br><span class="line">        NavigationActions.setParams(&#123;</span><br><span class="line">          params,</span><br><span class="line">          key: navigation.state.key,</span><br><span class="line">        &#125;),</span><br><span class="line">      ),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="安卓上，使用TextInput的时候会让TabBar顶起来的解决办法"><a href="#安卓上，使用TextInput的时候会让TabBar顶起来的解决办法" class="headerlink" title="安卓上，使用TextInput的时候会让TabBar顶起来的解决办法"></a>安卓上，使用TextInput的时候会让TabBar顶起来的解决办法</h3><p>最简单的解决办法就是在android目录中，添加一句话</p><p>目录：android/app/src/main/AndroidManifest.xml中，添加</p><blockquote><p>android:windowSoftInputMode=”stateAlwaysHidden|adjustPan|adjustResize”</p></blockquote><p>ps：在iOS下如果想一劳永逸的解决键盘问题，请使用IQKeyBoardManager。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>react-navigation才开始用的时候感觉是复杂的，但用的多了，会感觉真的很不错。<br>如果在文章中有什么不懂的问题，欢迎在评论区评论，也可以发私信，加QQ群397885169一起讨论哦。</p><p>本编文章以同步到博客：<a href="http://zhangyanlf.cn" target="_blank" rel="noopener">传送门</a><br>文章转载于<a href="http://www.jianshu.com/p/2f575cc35780" target="_blank" rel="noopener">挂着铃铛的兔</a>点击查看更多文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是基于最新的react-navigation^1.0.0-beta.13来书写的。&lt;/p&gt;
&lt;p&gt;如果遇到什么问题可以在评论区回复，或者加QQ群397885169讨论:&lt;/p&gt;
&lt;h3 id=&quot;识兔，一款用来识别图片的开源项目，里面有很多知识点，看看会对你学习RN有很大
      
    
    </summary>
    
    
      <category term="React Native" scheme="https://zhangyanlf.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native Android真机测试 -unable to load script from assets &#39;index.android bundle&#39;...</title>
    <link href="https://zhangyanlf.top/2017/08/28/React-Native%20Android%E7%9C%9F%E6%9C%BA%E6%B5%8B%E8%AF%95%20-unable%20to%20load%20script%20from%20assets%20&#39;index.android%20bundle&#39;.../"/>
    <id>https://zhangyanlf.top/2017/08/28/React-Native Android真机测试 -unable to load script from assets &#39;index.android bundle&#39;.../</id>
    <published>2017-08-27T16:00:00.000Z</published>
    <updated>2017-12-22T07:20:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在Android-华为手机上运行React-Native工程时出现了如下错误，做以记录："><a href="#在Android-华为手机上运行React-Native工程时出现了如下错误，做以记录：" class="headerlink" title="在Android 华为手机上运行React_Native工程时出现了如下错误，做以记录："></a>在Android 华为手机上运行React_Native工程时出现了如下错误，做以记录：</h4><blockquote><p>报错：unable to load script from assets ‘index.android bundle’  ,make sure your bundle is packaged correctly or youu’re runing a packager server</p></blockquote><p>解决报错的方法：</p><p>第一步：在Android/app/src/main目录下创建一个空的assets文件夹，</p><p>第二步：进入项目根目录执行下面代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/</span><br></pre></td></tr></table></figure></p><blockquote><p>运行完毕后assets文件夹下会多出index.android.bundle和index.android.bundle.meta两个文件</p></blockquote><p>第三步：重新运行程序完美解决。</p><p>总结：<br>index.android.bundle是用来调用原生控件的js脚本，每次当改变了 index.android.js，都需要使用上面的代码片段，来及时的更新index.android.bundle，然后打包才可以把新的index.android.js应用上，所以当没有index.android.bundle文件时，React-Native 项目是无法运行的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在Android-华为手机上运行React-Native工程时出现了如下错误，做以记录：&quot;&gt;&lt;a href=&quot;#在Android-华为手机上运行React-Native工程时出现了如下错误，做以记录：&quot; class=&quot;headerlink&quot; title=&quot;在And
      
    
    </summary>
    
    
      <category term="React Native" scheme="https://zhangyanlf.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native 项目打包(iOS/Android)</title>
    <link href="https://zhangyanlf.top/2017/08/03/React-Native%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85(iOS_Android)/"/>
    <id>https://zhangyanlf.top/2017/08/03/React-Native 项目打包(iOS_Android)/</id>
    <published>2017-08-02T16:00:00.000Z</published>
    <updated>2017-12-22T07:21:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Android-打包"><a href="#1-Android-打包" class="headerlink" title="1.    Android 打包"></a>1.    Android 打包</h1><blockquote><p>第一步:生成Android签名证书</p></blockquote><p>签名APK需要一个证书用于为APP签名，生成签名证书可以Android Studio以可视化的方式生成，也可以使用终端采用命令行的方式生成。</p><blockquote><p>第二步：设置gradle变量</p></blockquote><p>1.将你的签名证书copy到 android/app目录下。<br>2.编辑~/.gradle/gradle. properties或../android/gradle.properties(一个是全局gradle.properties，一个是项目中的gradle.properties，大家可以根据需要进行修改) ，加入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MYAPP_RELEASE_STORE_FILE=your keystore filename  </span><br><span class="line">MYAPP_RELEASE_KEY_ALIAS=your keystore alias  </span><br><span class="line">MYAPP_RELEASE_STORE_PASSWORD=*****    </span><br><span class="line">MYAPP_RELEASE_KEY_PASSWORD=*****</span><br></pre></td></tr></table></figure></p><p>提示：用正确的证书密码、alias以及key密码替换掉 *。</p><blockquote><p>第三步：在gradle配置文件中添加签名配置</p></blockquote><p>编辑 android/app/build.gradle文件添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...  </span><br><span class="line">android &#123;  </span><br><span class="line">    ...  </span><br><span class="line">    defaultConfig &#123; ... &#125;  </span><br><span class="line">    signingConfigs &#123;  </span><br><span class="line">        release &#123;  </span><br><span class="line">            storeFile file(MYAPP_RELEASE_STORE_FILE)  </span><br><span class="line">            storePassword MYAPP_RELEASE_STORE_PASSWORD  </span><br><span class="line">            keyAlias MYAPP_RELEASE_KEY_ALIAS  </span><br><span class="line">            keyPassword MYAPP_RELEASE_KEY_PASSWORD  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    buildTypes &#123;  </span><br><span class="line">        release &#123;  </span><br><span class="line">            ...  </span><br><span class="line">            signingConfig signingConfigs.release  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><blockquote><p>第四步：签名打包APK</p></blockquote><p>terminal进入项目下的android目录，运行如下代码：./gradlew assembleRelease</p><blockquote><p>签名打包成功后你会在 “android/app/build/outputs/apk/”目录下看到签名成功后的app-release.apk文件。</p></blockquote><font color="#0099ff" size="3" face="黑体">提示：如果你需要对apk进行混淆打包 编辑android/app/build.gradle：。</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**     </span><br><span class="line"> * Run Proguard to shrink the Java bytecode in release builds.  </span><br><span class="line"> */  </span><br><span class="line">def enableProguardInReleaseBuilds = true</span><br></pre></td></tr></table></figure><h1 id="2-iOS打包"><a href="#2-iOS打包" class="headerlink" title="2.iOS打包"></a>2.iOS打包</h1><blockquote><p>第一步：rn项目的ios工程文件夹创建bundle文件夹，然后生成jsbundle</p></blockquote><p>进入rn项目的ios工程文件夹，找到和rn项目同名的文件件，打开AppDelegate.m文件，将这一行注释掉(为了方便真机和模拟器间的切换，尽量注释)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jsCodeLocation = [[RCTBundleURLProvider sharedSettings] </span><br><span class="line">jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</span><br></pre></td></tr></table></figure><p>新加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;index.ios&quot; withExtension:@&quot;jsbundle&quot;];</span><br></pre></td></tr></table></figure><font color="#0099ff" size="3" face="黑体">如果需要切换回模拟器调试，只需要将新加这行注释掉，并恢复原代码即可。</font><p>新加这行代码意思就是告诉native rn代码的入口，我们会在下一步生成这个jsbundle。</p><blockquote><p>第二步：打开终端，进入你的rn工程，在根目录下执行bundle命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --entry-file ./index.ios.js --bundle-output ./ios/bundle/index.ios.jsbundle --platform ios --assets-dest ./ios/bundle --dev false</span><br></pre></td></tr></table></figure><p>参数说明：</p><blockquote><ul><li>-entry-file 指定入口文件 因为要打包ios平台，所以指定为rn项目的index.ios.js作为入口</li><li>–bundle-output 指定输出的jsbundle文件路径和文件名 指定到rn项目的ios工程文件夹下，记得一定要先创建bundle文件夹，不然终端会报文件夹找不到的错误</li><li>–platform 指定平台类型</li><li>–assets-dest 指定资源文件夹路径 assets文件夹的路径，包含图片、node模块等资源</li><li>–dev 是否为开发模式 如果设置为false，不会产生警告，并且bundle会被压缩<br>还有其他命令，比如：transformer、prepack、bundle-encoding等，可以到官网查看具体介绍。</li></ul></blockquote><p>完成后bundle生成完成后，终端会有类似提示：<br><img src="http://img.blog.csdn.net/20170803104727311?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><blockquote><p>第三步：用xcode Open another project打开rn项目的ios工程文件夹<br><img src="http://img.blog.csdn.net/20170803104758743?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></blockquote><p>配置网络访问白名单：<br>    打开info.plist<br>    <img src="http://img.blog.csdn.net/20170803104937292?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>设置应用图标和启动图:</p><font color="#0099ff" size="3" face="黑体">iOS应用中没有图标，打包会报错。</font><p>然后，就可以进行打包，流程和原生iOS打包流程一样，（首先的配置证书）<br>iOS打包流程可以参照博客中的打包上线流程：<a href="http://blog.csdn.net/sinat_34380438/article/details/52485342" target="_blank" rel="noopener">传送门</a></p><font color="#0099ff" size="3" face="黑体">注：Ad Hoc 和 App Store 打包过程基本一样，区别在于生成证书时需选择相对应的证书。<br>。</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Android-打包&quot;&gt;&lt;a href=&quot;#1-Android-打包&quot; class=&quot;headerlink&quot; title=&quot;1.    Android 打包&quot;&gt;&lt;/a&gt;1.    Android 打包&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;第一步:生成And
      
    
    </summary>
    
    
      <category term="React Native" scheme="https://zhangyanlf.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native集成JPush-react-native及应用设置Tags、Alias（iOS/Android）</title>
    <link href="https://zhangyanlf.top/2017/07/31/React-Native%E9%9B%86%E6%88%90JPush-react-native%E5%8F%8A%E5%BA%94%E7%94%A8%E8%AE%BE%E7%BD%AETags%E3%80%81Alias/"/>
    <id>https://zhangyanlf.top/2017/07/31/React-Native集成JPush-react-native及应用设置Tags、Alias/</id>
    <published>2017-07-30T16:00:00.000Z</published>
    <updated>2017-12-22T07:20:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中用到推送功能，且项目是以React-Native框架实现iOS、Android跨平台开发，自然而然就选择了极光实现推送功能，由于以前是iOS开发对Android了解的不很很深，在集成和设置别名等问题上也遇到些坑，现在就把集成步骤及遇到的问题分享出来，仅供大家参考，有什么问题也可以留言一起探讨：</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>cd到项目根目录</li><li>执行 npm install jpush-react-native –save</li><li>npm install jcore-react-native –save ## jpush-react-native 1.4.2 版本以后需要同时安装 jcore-react-native</li></ul><hr><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p> 配置包括两个步骤，自动配置和手动操作。</p><p>1.自动配置：以下命令均在你的 React Native 项目目录下运行，自动配置后仍需手动配置一部分）</p><ul><li>执行脚本<br> npm run configureJPush  yourAppKey  yourModuleName<br>module name 指的是你 Android 项目中的模块名字(对 iOS 没有影响，不填写的话默认值为 app，会影响到查找 AndroidManifest 问题，<br>如果没找到 AndroidManifest，则需要手动修改，参考下面的 AndroidManifest 配置相关说明)</li></ul><p>eg:<br>npm run configureJPush 48f30d0b04d9bc4f5ad7de53 app</p><ul><li>执行脚本<br>react-native link</li></ul><p>2.手动配置部分<br>iOS 手动操作部分 （4步）</p><ul><li><p>在React-Native工程中node_modules -&gt; push-react-native -&gt; ios - &gt; RCTJPushModule -&gt; RCTJPushModule.xcodeproj 拖入iOS工程Libraries中并添加：<br><img src="http://img.blog.csdn.net/20170731130137629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li><li><p>在 iOS 工程中设置 TARGETS-&gt; BUILD Phases -&gt; LinkBinary with Libraries 找到 UserNotifications.framework 把 status 设为 optional</p></li><li><p>在 iOS 工程中如果找不到头文件可能要在 TARGETS-&gt; BUILD SETTINGS -&gt; Search Paths -&gt; Header Search Paths 添加如下路径<br>$(SRCROOT)/../node_modules/jpush-react-native/ios/RCTJPushModule/RCTJPushModule</p></li><li><p>在 xcode8 之后需要点开推送选项： TARGETS -&gt; Capabilities -&gt; Push Notification 设为 on 状态</p></li></ul><hr><p>Android 手动操作部分</p><p>修改 app 下的 build.gradle 配置：</p><blockquote><p> react native project/android/app/build.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;yourApplicationId&quot;</span><br><span class="line">        ...</span><br><span class="line">        manifestPlaceholders = [</span><br><span class="line">                JPUSH_APPKEY: &quot;yourAppKey&quot;, //在此替换你的APPKey</span><br><span class="line">                APP_CHANNEL: &quot;developer-default&quot;    //应用渠道号</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class="line">    compile project(&apos;:jpush-react-native&apos;)  // 添加 jpush 依赖</span><br><span class="line">    compile project(&apos;:jcore-react-native&apos;)  // 添加 jcore 依赖</span><br><span class="line">    compile &quot;com.facebook.react:react-native:+&quot;  // From node_modules</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>将此处的 yourApplicationId 替换为你的项目的包名；yourAppKey 替换成你在官网上申请的应用的 AppKey。<br>检查一下 dependencies 中有没有添加 jpush-react-native 及 jcore-react-native 这两个依赖。</p><blockquote><p>react native project/android/app/build.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class="line">    compile project(&apos;:jpush-react-native&apos;)  // 添加 jpush 依赖</span><br><span class="line">    compile project(&apos;:jcore-react-native&apos;)  // 添加 jcore 依赖</span><br><span class="line">    compile &quot;com.facebook.react:react-native:+&quot;  // From node_modules</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>检查 android 项目下的 settings.gradle 配置有没有包含以下内容： </p><blockquote><p> settings.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:app&apos;, &apos;:jpush-react-native&apos;, &apos;:jcore-react-native&apos;</span><br><span class="line">project(&apos;:jpush-react-native&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/jpush-react-native/android&apos;)</span><br><span class="line">project(&apos;:jcore-react-native&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/jcore-react-native/android&apos;)</span><br></pre></td></tr></table></figure></p></blockquote><p>检查一下 app 下的 AndroidManifest 配置，有没有增加 部分。</p><blockquote><p>react native project/android/app/AndroidManifest.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">        ...</span><br><span class="line">        &lt;!-- Required . Enable it you can get statistics data with channel --&gt;</span><br><span class="line">        &lt;meta-data android:name=&quot;JPUSH_CHANNEL&quot; android:value=&quot;$&#123;APP_CHANNEL&#125;&quot;/&gt;</span><br><span class="line">        &lt;meta-data android:name=&quot;JPUSH_APPKEY&quot; android:value=&quot;$&#123;JPUSH_APPKEY&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/application&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>然后重新 sync 一下项目，应该能看到 jpush-react-native 以及 jcore-react-native 作为 android Library 项目导进来了</p><p>加入 JPushPackage，有参数！</p><ul><li><p>RN 0.29.0 以下版本<br>打开 app 下的 MainActivity，在 ReactInstanceManager 的 build 方法中加入 JPushPackage： </p><blockquote><p>app/MainActivity.java<br><img src="http://img.blog.csdn.net/20170731130902450?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></blockquote></li><li><p>RN 0.29.0 以上版本<br>打开 app 下的 MainApplication.java 文件，然后加入 JPushPackage,也可以参考官方<a href="https://github.com/jpush/jpush-react-native/blob/master/example/android/app/src/com/pushdemo/MainApplication.java" target="_blank" rel="noopener">Demo</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 设置为 true 将不弹出 toast</span><br><span class="line">private boolean SHUTDOWN_TOAST = false;</span><br><span class="line">// 设置为 true 将不打印 log</span><br><span class="line">private boolean SHUTDOWN_LOG = false;</span><br><span class="line"></span><br><span class="line">private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean getUseDeveloperSupport() &#123;</span><br><span class="line">        return BuildConfig.DEBUG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class="line">        return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">                new MainReactPackage(),</span><br><span class="line">                new JPushPackage(SHUTDOWN_TOAST, SHUTDOWN_LOG)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>到这里Push-react-native就已将集成到iOS和Android工程中了，然后就可以去极光后台发送通知，查看推送消息（注：如果你是Android工程师，在iOS集成后还需将推送证书上传到极光后台认证，认证通过后即可发送推送通知！！！）</p><h2 id="上面集成就告一段落了，下面就是在React-Native项目中给iOS和Android-设置Tags和-Alias了："><a href="#上面集成就告一段落了，下面就是在React-Native项目中给iOS和Android-设置Tags和-Alias了：" class="headerlink" title="上面集成就告一段落了，下面就是在React-Native项目中给iOS和Android 设置Tags和 Alias了："></a>上面集成就告一段落了，下面就是在React-Native项目中给iOS和Android 设置Tags和 Alias了：</h2><blockquote><p>Note: In Android, you must call initPush first, iOS doesn’t need.<br>在设置tags和Alias前 Android项目首先需要在MainActivity中 initPush ，iOS不需要操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;componentDidMount&apos;);</span><br><span class="line">    JPushModule.setTags([this.state.tag], () =&gt; &#123;</span><br><span class="line">            // Alert.alert(&apos;成功&apos;, &apos;tags 成功&apos;,[&#123;text: &apos;OK&apos;&#125;])；</span><br><span class="line">            console.log(&apos;success set tag&apos;);</span><br><span class="line">        &#125;, () =&gt; &#123;</span><br><span class="line">            // Alert.alert(&apos;失败&apos;,&apos;设置alias 失败&apos;,[&#123;text:&apos;fail&apos;&#125;]);</span><br><span class="line">            console.log(&apos;fail set tag&apos;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    JPushModule.setAlias(&apos;James&apos;, () =&gt; &#123;</span><br><span class="line">        Alert.alert(&apos;成功&apos;, &apos;设置alias 成功&apos;,[&#123;text: &apos;OK&apos;&#125;]);</span><br><span class="line">        console.log(&apos;成功&apos;);</span><br><span class="line">    &#125;, () =&gt; &#123;</span><br><span class="line">        Alert.alert(&apos;失败&apos;,&apos;设置alias 失败&apos;,[&#123;text:&apos;fail&apos;&#125;]);</span><br><span class="line">        console.log(&apos;失败&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote>  <font color="#A52A2A" size="5" face="黑体">注:在设置Tags时要传一个数组过去！！！</font></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目中用到推送功能，且项目是以React-Native框架实现iOS、Android跨平台开发，自然而然就选择了极光实现推送功能，由于以前是iOS开发对Android了解的不很很深，在集成和设置别名等问题上也遇到些坑，现在就把集成步骤及遇到的问题分享出来，仅供大家参考，
      
    
    </summary>
    
    
      <category term="React Native" scheme="https://zhangyanlf.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native图表插件react-native-charts-wrapper集成教程</title>
    <link href="https://zhangyanlf.top/2017/05/23/React%20Native%E5%9B%BE%E8%A1%A8%E6%8F%92%E4%BB%B6react-native-charts-wrapper%E9%9B%86%E6%88%90%E6%95%99%E7%A8%8B/"/>
    <id>https://zhangyanlf.top/2017/05/23/React Native图表插件react-native-charts-wrapper集成教程/</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2017-12-22T07:22:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司项目要用到图标显示，在网上找了好多天找到react-native-charts-wrapper，这款第三方图形很全，功能也很强大，就和大家一起分享下使用心得:(iOS端)，好了，话不多说，接下来开始一步一步集成图表插件react-native-charts-wrapper：<br><img src="http://img.blog.csdn.net/20170523103521051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><a href="https://github.com/wuxudong/react-native-charts-wrapper" target="_blank" rel="noopener">react-native-charts-wrapper GitHub地址</a></p><h2 id="1-新建一个项目"><a href="#1-新建一个项目" class="headerlink" title="1.新建一个项目"></a>1.新建一个项目</h2><p><img src="http://img.blog.csdn.net/20170523131238816?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>出现下面界面时，说明项目已经创建成功：</p><p><img src="http://img.blog.csdn.net/20170523131338128?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="2-安装react-native-charts-wrapper-（注意：一定要在根目录下安装）"><a href="#2-安装react-native-charts-wrapper-（注意：一定要在根目录下安装）" class="headerlink" title="2.安装react-native-charts-wrapper （注意：一定要在根目录下安装）"></a>2.安装react-native-charts-wrapper （注意：一定要在根目录下安装）</h2><p>进入项目根目录执行 npm install –save react-native-charts-wrapper</p><p><img src="http://img.blog.csdn.net/20170523132007528?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="3-把该目录下ZylCharts-node-modules-react-native-charts-wrapper-ReactNativeCharts的整个ReactNativeCharts文件夹-拖入到项目中"><a href="#3-把该目录下ZylCharts-node-modules-react-native-charts-wrapper-ReactNativeCharts的整个ReactNativeCharts文件夹-拖入到项目中" class="headerlink" title="3.把该目录下ZylCharts/node_modules/react-native-charts-wrapper/ReactNativeCharts的整个ReactNativeCharts文件夹,拖入到项目中"></a>3.把该目录下ZylCharts/node_modules/react-native-charts-wrapper/ReactNativeCharts的整个ReactNativeCharts文件夹,拖入到项目中</h2><p><img src="http://img.blog.csdn.net/20170523132744086?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170523132832451?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>拖入后：</p><p><img src="http://img.blog.csdn.net/20170523132904603?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="4-Add-Bridge-File：因为后面会用到SwiftyJSONandiOS-Charts-这是用Swift写的，所以我们需要一个桥接文件，方法如下："><a href="#4-Add-Bridge-File：因为后面会用到SwiftyJSONandiOS-Charts-这是用Swift写的，所以我们需要一个桥接文件，方法如下：" class="headerlink" title="4.Add Bridge File：因为后面会用到SwiftyJSONandiOS Charts,这是用Swift写的，所以我们需要一个桥接文件，方法如下："></a>4.Add Bridge File：因为后面会用到SwiftyJSONandiOS Charts,这是用Swift写的，所以我们需要一个桥接文件，方法如下：</h2><p>新建一个工程名-Bridging-Header.h头文件(注意，必须是工程名开头！！！)：</p><p><img src="http://img.blog.csdn.net/20170523133420984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20170523133548282?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20170523133735689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="5-接下来就需要使用我前面说的SwiftyJSONandiOS-Charts"><a href="#5-接下来就需要使用我前面说的SwiftyJSONandiOS-Charts" class="headerlink" title="5.接下来就需要使用我前面说的SwiftyJSONandiOS Charts"></a>5.接下来就需要使用我前面说的SwiftyJSONandiOS Charts</h2><p>这里已经下好了，链接地址： <a href="https://pan.baidu.com/s/1o7Y3oRg" target="_blank" rel="noopener">https://pan.baidu.com/s/1o7Y3oRg</a> 密码: 32j9</p><p>下载下拉解压后，拖到iOS项目根目录下：</p><p><img src="http://img.blog.csdn.net/20170523135047099?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="6-把刚刚的两个文件夹中的SwiftyJSON-xcodeproj-and-Charts-xcodeproj拖到工程的libraries中："><a href="#6-把刚刚的两个文件夹中的SwiftyJSON-xcodeproj-and-Charts-xcodeproj拖到工程的libraries中：" class="headerlink" title="6.把刚刚的两个文件夹中的SwiftyJSON.xcodeproj and Charts.xcodeproj拖到工程的libraries中："></a>6.把刚刚的两个文件夹中的SwiftyJSON.xcodeproj and Charts.xcodeproj拖到工程的libraries中：</h2><p><img src="http://img.blog.csdn.net/20170523135310883?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="7-接下来-gt-Build-Phases-gt-Link-Binary-With-Libraries添加SwiftyJSON-frameworkand-Charts-framework"><a href="#7-接下来-gt-Build-Phases-gt-Link-Binary-With-Libraries添加SwiftyJSON-frameworkand-Charts-framework" class="headerlink" title="7.接下来-&gt; Build Phases -&gt;Link Binary With Libraries添加SwiftyJSON.frameworkand Charts.framework."></a>7.接下来-&gt; Build Phases -&gt;Link Binary With Libraries添加SwiftyJSON.frameworkand Charts.framework.</h2><p><img src="http://img.blog.csdn.net/20170523135507338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="8-添加SwiftyJSON-frameworkand-Charts-framework-到-Embedded-Binaries"><a href="#8-添加SwiftyJSON-frameworkand-Charts-framework-到-Embedded-Binaries" class="headerlink" title="8.添加SwiftyJSON.frameworkand Charts.framework 到 Embedded Binaries."></a>8.添加SwiftyJSON.frameworkand Charts.framework 到 Embedded Binaries.</h2><p><img src="http://img.blog.csdn.net/20170523135652932?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>然后：Edit -&gt; Convert -&gt; To Current Swift Syntax…</p><p><img src="http://img.blog.csdn.net/20170523133958164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20170523150624015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>完成之后点击save。</p><p>接下来在桥文件里面添加：</p><p><img src="http://img.blog.csdn.net/20170523134236948?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="9-到这里配置已经完成，花键-b变一下程序："><a href="#9-到这里配置已经完成，花键-b变一下程序：" class="headerlink" title="9.到这里配置已经完成，花键+b变一下程序："></a>9.到这里配置已经完成，花键+b变一下程序：</h2><p>遇到错误：<br>1.Command /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc failed with exit code 1<br>  2.Command /usr/bin/ditto failed with exit code 1<br>原因：运行从网下下载的swift项目的时候，基本上都会出现这个错误。意思是找不到项目文件。<br>解决方法：直接忽略，运行程序就好。</p><p>这样就配置好了，项目中的报错也就解决了！</p><p>##下面就根据react-native-charts-wrapper文档示例代码，写个柱形图。</p><p>index.ios.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View</span><br><span class="line">&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">import ZylChartScreen from &apos;./ZylChartScreen&apos;;</span><br><span class="line"></span><br><span class="line">export default class ZylCharts extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line"></span><br><span class="line">              &lt;ZylChartScreen /&gt;</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(&apos;ZylCharts&apos;, () =&gt; ZylCharts);</span><br></pre></td></tr></table></figure><p>ZylChartScreen.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by zhangyanlf on 17/5/23.</span><br><span class="line"> */</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">    AppRegistry,</span><br><span class="line">    StyleSheet,</span><br><span class="line">    Text,</span><br><span class="line">    View,</span><br><span class="line">    processColor</span><br><span class="line">&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;BarChart&#125; from &apos;react-native-charts-wrapper&apos;;</span><br><span class="line"></span><br><span class="line">class ZylBarChartScreen extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line"></span><br><span class="line">        this.state = &#123;</span><br><span class="line">            legend: &#123;</span><br><span class="line">                enabled: true,</span><br><span class="line">                textSize: 14,</span><br><span class="line">                form: &apos;SQUARE&apos;,</span><br><span class="line">                formSize: 14,</span><br><span class="line">                xEntrySpace: 10,</span><br><span class="line">                yEntrySpace: 5,</span><br><span class="line">                formToTextSpace: 5,</span><br><span class="line">                wordWrapEnabled: true,</span><br><span class="line">                maxSizePercent: 0.5</span><br><span class="line">            &#125;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                dataSets: [&#123;</span><br><span class="line">                    values: [&#123;y: 100&#125;,</span><br><span class="line">                            &#123;y: 105&#125;,</span><br><span class="line">                            &#123;y: 102&#125;,</span><br><span class="line">                            &#123;y: 110&#125;,</span><br><span class="line">                            &#123;y: 114&#125;,</span><br><span class="line">                            &#123;y: 109&#125;,</span><br><span class="line">                            &#123;y: 105&#125;,</span><br><span class="line">                            &#123;y: 99&#125;,</span><br><span class="line">                            &#123;y: 95&#125;],</span><br><span class="line">                    label: &apos;Bar dataSet&apos;,</span><br><span class="line">                    config: &#123;</span><br><span class="line">                        color: processColor(&apos;teal&apos;),</span><br><span class="line">                        barSpacePercent: 40,</span><br><span class="line">                        barShadowColor: processColor(&apos;lightgrey&apos;),</span><br><span class="line">                        highlightAlpha: 90,</span><br><span class="line">                        highlightColor: processColor(&apos;red&apos;),</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;],</span><br><span class="line">            &#125;,</span><br><span class="line">            xAxis: &#123;</span><br><span class="line">                valueFormatter: [&apos;Jan&apos;, &apos;Feb&apos;, &apos;Mar&apos;, &apos;Apr&apos;, &apos;May&apos;, &apos;Jun&apos;, &apos;Jul&apos;, &apos;Aug&apos;, &apos;Sep&apos;],</span><br><span class="line">                granularityEnabled: true,</span><br><span class="line">                granularity : 1,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleSelect(event) &#123;</span><br><span class="line">        let entry = event.nativeEvent</span><br><span class="line">        if (entry == null) &#123;</span><br><span class="line">            this.setState(&#123;...this.state, selectedEntry: null&#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.setState(&#123;...this.state, selectedEntry: JSON.stringify(entry)&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;View style=&#123;&#123;flex: 1&#125;&#125;&gt;</span><br><span class="line">                &lt;View style=&#123;&#123;height:80,marginTop: 15&#125;&#125;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;Text style=&#123;styles.entryStyle&#125;&gt; selected entry&lt;/Text&gt;</span><br><span class="line">                    &lt;Text style=&#123;styles.entryStyle&#125;&gt; &#123;this.state.selectedEntry&#125;&lt;/Text&gt;</span><br><span class="line">                &lt;/View&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                    &lt;BarChart</span><br><span class="line">                        style=&#123;styles.chart&#125;</span><br><span class="line">                        data=&#123;this.state.data&#125;</span><br><span class="line">                        xAxis=&#123;this.state.xAxis&#125;</span><br><span class="line">                        animation=&#123;&#123;durationX: 2000&#125;&#125;</span><br><span class="line">                        legend=&#123;this.state.legend&#125;</span><br><span class="line">                        gridBackgroundColor=&#123;processColor(&apos;#ffffff&apos;)&#125;</span><br><span class="line">                        drawBarShadow=&#123;false&#125;</span><br><span class="line">                        drawValueAboveBar=&#123;true&#125;</span><br><span class="line">                        drawHighlightArrow=&#123;true&#125;</span><br><span class="line">                        onSelect=&#123;this.handleSelect.bind(this)&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;/View&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">    container: &#123;</span><br><span class="line">        flex: 1,</span><br><span class="line">        backgroundColor: &apos;#F5FCFF&apos;,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    chart: &#123;</span><br><span class="line">        flex: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    entryStyle: &#123;</span><br><span class="line">        color: &apos;orange&apos;,</span><br><span class="line">        alignItems: &apos;center&apos;,</span><br><span class="line">        justifyContent: &apos;center&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default ZylBarChartScreen;</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="http://img.blog.csdn.net/20170523165704391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>ok，就先写一个柱形图，其他的以后有时间再继续学习！！!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近公司项目要用到图标显示，在网上找了好多天找到react-native-charts-wrapper，这款第三方图形很全，功能也很强大，就和大家一起分享下使用心得:(iOS端)，好了，话不多说，接下来开始一步一步集成图表插件react-native-charts-wrap
      
    
    </summary>
    
    
      <category term="React Native" scheme="https://zhangyanlf.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 封装Tabbar</title>
    <link href="https://zhangyanlf.top/2017/05/11/RN%E5%B0%81%E8%A3%85Tabbar/"/>
    <id>https://zhangyanlf.top/2017/05/11/RN封装Tabbar/</id>
    <published>2017-05-10T16:00:00.000Z</published>
    <updated>2017-12-22T07:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="做个封装的Tabbar为了以后方便运用，同时也希望给初学者提供一点小小的帮助，闲话不多说了-开始工程！（兼容iOS及Android）。"><a href="#做个封装的Tabbar为了以后方便运用，同时也希望给初学者提供一点小小的帮助，闲话不多说了-开始工程！（兼容iOS及Android）。" class="headerlink" title="做个封装的Tabbar为了以后方便运用，同时也希望给初学者提供一点小小的帮助，闲话不多说了,开始工程！（兼容iOS及Android）。"></a>做个封装的Tabbar为了以后方便运用，同时也希望给初学者提供一点小小的帮助，闲话不多说了,开始工程！（兼容iOS及Android）。</h1><h4 id="1-初始化项目导入图片资源，iOS直接导入Images-xcassets即可，Android导入src-mian-res下面，与Android导入资源方法一致。"><a href="#1-初始化项目导入图片资源，iOS直接导入Images-xcassets即可，Android导入src-mian-res下面，与Android导入资源方法一致。" class="headerlink" title="1.初始化项目导入图片资源，iOS直接导入Images.xcassets即可，Android导入src/mian/res下面，与Android导入资源方法一致。"></a>1.初始化项目导入图片资源，iOS直接导入Images.xcassets即可，Android导入src/mian/res下面，与Android导入资源方法一致。</h4><h4 id="2-整合项目，创建Class文件夹，将所要编写的js文件全部放在里面方便管理及后期项目维护。"><a href="#2-整合项目，创建Class文件夹，将所要编写的js文件全部放在里面方便管理及后期项目维护。" class="headerlink" title="2.整合项目，创建Class文件夹，将所要编写的js文件全部放在里面方便管理及后期项目维护。"></a>2.整合项目，创建Class文件夹，将所要编写的js文件全部放在里面方便管理及后期项目维护。</h4><p>###整合后index.ios.js及index.android.js作为程序的入口，Class中创建packageTabbar.js文件， 如下图：<br><img src="http://img.blog.csdn.net/20170511094014857?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><img src="http://img.blog.csdn.net/20170511094111654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>注意：导入外部组件时首字母必须大写不然会报错。<br><img src="http://img.blog.csdn.net/20170511094320055?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>ok！！下面就开始一步一步的封装Tabbar：<br>第一步：进入RN项目目录执行npm install react-native-tab-navigator –save导入库   <a href="https://github.com/expo/react-native-tab-navigator" target="_blank" rel="noopener">传送门 学习react-native-tab-navigator具体使用</a>；</p><p>第二步：进入packagetabbar.js导入外部组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/**-导入外部组件-**/</span><br><span class="line">import TabNavigator from &apos;react-native-tab-navigator&apos;;</span><br></pre></td></tr></table></figure><p>第三部：编写Tabbar代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">/**----导入外部组件-----**/</span><br><span class="line">import TabNavigator from &apos;react-native-tab-navigator&apos;;</span><br><span class="line"></span><br><span class="line">var Home = require(&apos;../Home/ZylHome&apos;);</span><br><span class="line">var Mine = require(&apos;../Mine/ZylMine&apos;);</span><br><span class="line">var Shop = require(&apos;../Shop/ZylShop&apos;);</span><br><span class="line">var More = require(&apos;../More/ZylMore&apos;);</span><br><span class="line"></span><br><span class="line">var Main = React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">    //初始化函数（变量是可以改变，从当状态机的角色）</span><br><span class="line">    getInitialState()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">          selectedTab:&apos;home&apos; //默认是第一个</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;TabNavigator&gt;</span><br><span class="line">                &#123;/*--首页--*/&#125;</span><br><span class="line">                &#123;this.renderTabBarItem(&apos;首页&apos;, &apos;icon_tabbar_homepage&apos;, &apos;icon_tabbar_homepage_selected&apos;, &apos;home&apos;, &apos;首页&apos;, Home)&#125;</span><br><span class="line">                &#123;/*--商家--*/&#125;</span><br><span class="line">                &#123;this.renderTabBarItem(&apos;商家&apos;, &apos;icon_tabbar_merchant_normal&apos;, &apos;icon_tabbar_merchant_selected&apos;, &apos;shop&apos;, &apos;商家&apos;, Shop)&#125;</span><br><span class="line">                &#123;/*--我的--*/&#125;</span><br><span class="line">                &#123;this.renderTabBarItem(&apos;我的&apos;, &apos;icon_tabbar_mine&apos;, &apos;icon_tabbar_mine_selected&apos;, &apos;mine&apos;, &apos;我的&apos;, Mine)&#125;</span><br><span class="line">                &#123;/*--更多--*/&#125;</span><br><span class="line">                &#123;this.renderTabBarItem(&apos;更多&apos;, &apos;icon_tabbar_misc&apos;, &apos;icon_tabbar_misc_selected&apos;, &apos;more&apos;, &apos;更多&apos;, More)&#125;</span><br><span class="line"></span><br><span class="line">            &lt;/TabNavigator&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //每一个TabBarItem</span><br><span class="line">    renderTabBarItem(title, iconName, selectedIconName, selectedTab, componentName, component, badgeText )&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;TabNavigator.Item</span><br><span class="line">                title=&#123;title&#125;</span><br><span class="line">                renderIcon=&#123;() =&gt; &lt;Image source=&#123;&#123;uri: iconName&#125;&#125; style=&#123;styles.iconStyle&#125;/&gt;&#125;</span><br><span class="line">                renderSelectedIcon=&#123;() =&gt; &lt;Image source=&#123;&#123;uri: selectedIconName&#125;&#125; style=&#123;styles.iconStyle&#125;/&gt;&#125; //选中图标</span><br><span class="line">                onPress=&#123;() =&gt;&#123;this.setState(&#123;selectedTab:selectedTab&#125;)&#125;&#125;</span><br><span class="line">                selected=&#123;this.state.selectedTab === selectedTab&#125;</span><br><span class="line">                selectedTitleStyle=&#123;styles.selectedTitleStyle&#125;</span><br><span class="line">                badgeText=&#123;badgeText&#125;</span><br><span class="line"></span><br><span class="line">            &gt;</span><br><span class="line">                &lt;Navigator</span><br><span class="line">                    initialRoute=&#123;&#123;name: componentName,component: component&#125;&#125;</span><br><span class="line">                    configureScene=&#123;() =&gt; &#123;</span><br><span class="line">                        return Navigator.SceneConfigs.PushFromRight;</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    renderScene=&#123;(route,navigator) =&gt; &#123;</span><br><span class="line">                        let Component = route.component;</span><br><span class="line">                        return &lt;Component &#123;...route.passProps&#125; navigator=&#123;navigator&#125;/&gt;</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;/TabNavigator.Item&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line"></span><br><span class="line">    iconStyle: &#123;</span><br><span class="line">        width: Platform.OS === &apos;ios&apos; ? 30 :25,</span><br><span class="line">        height: Platform.OS === &apos;ios&apos; ? 30 :25</span><br><span class="line">    &#125;,</span><br><span class="line">    selectedTitleStyle: &#123;</span><br><span class="line">        color: &apos;orange&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第四部：运行工程，查看结果，针对iOS及Android页面细节做出调整（查看上面代码Platform–判断系统）</p><p>效果图如下：<br><img src="http://img.blog.csdn.net/20170511112637847?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzQzODA0Mzg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><a href="https://github.com/zhangyanlf/zhylTabbar" target="_blank" rel="noopener">GitHub地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;做个封装的Tabbar为了以后方便运用，同时也希望给初学者提供一点小小的帮助，闲话不多说了-开始工程！（兼容iOS及Android）。&quot;&gt;&lt;a href=&quot;#做个封装的Tabbar为了以后方便运用，同时也希望给初学者提供一点小小的帮助，闲话不多说了-开始工程！（兼
      
    
    </summary>
    
    
      <category term="React Native" scheme="https://zhangyanlf.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 搭建开发环境</title>
    <link href="https://zhangyanlf.top/2017/04/29/React%20native%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
    <id>https://zhangyanlf.top/2017/04/29/React native搭建环境/</id>
    <published>2017-04-28T16:00:00.000Z</published>
    <updated>2017-12-22T07:22:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚搭好博客，一时半会儿也不知道些什么，想想自己在接触RN时遇到的坑，所以就从第一步搭建RN开发环境说起，能让刚接触RN的伙伴们少走一些弯路。</p><ul><li><strong>本篇文章是基于iOS 在macOS上搭建RN环境</strong></li></ul><hr><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>##必须的软件</p><h3 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h3><ul><li>Homebrew, Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件。<blockquote><p>/usr/bin/ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p></blockquote></li></ul><ul><li>译注：在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：<blockquote><p>sudo chown -R <code>whoami</code> /usr/local</p></blockquote></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ul><li>使用Homebrew来安装Node.js<br>React Native目前需要NodeJS 5.0或更高版本。本文发布时Homebrew默认安装的是最新版本，一般都满足要求。</li></ul><blockquote><p>brew install node</p></blockquote><p>安装完node后建议设置npm镜像以加速后面的过程（或使用科学上网工具）。注意：不要使用cnpm！cnpm安装的模块路径比较奇怪，packager不能正常识别！</p><blockquote><p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> –global<br>npm config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="noopener">https://npm.taobao.org/dist</a> –global</p></blockquote><h4 id="Yarn、React-Native的命令行工具（react-native-cli）"><a href="#Yarn、React-Native的命令行工具（react-native-cli）" class="headerlink" title="Yarn、React Native的命令行工具（react-native-cli）"></a>Yarn、React Native的命令行工具（react-native-cli）</h4><p>Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载。React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</p><blockquote><p>npm install -g yarn react-native-cli</p></blockquote><p>安装完yarn后同理也要设置镜像源</p><blockquote><p>yarn config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> –global<br>yarn config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="noopener">https://npm.taobao.org/dist</a> –global</p></blockquote><p>如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权：</p><blockquote><p>sudo chown -R <code>whoami</code> /usr/local</p></blockquote><p>###Xcode<br>React Native目前需要Xcode 8.0 或更高版本。你可以通过App Store或是到Apple开发者官网上下载。这一步骤会同时安装Xcode IDE和Xcode的命令行工具。</p><blockquote><p>虽然一般来说命令行工具都是默认安装了，但你最好还是启动Xcode，并在Xcode | Preferences | Locations菜单中检查一下是否装有某个版本的Command Line Tools。Xcode的命令行工具中也包含一些必须的工具，比如git等。</p></blockquote><h2 id="推荐安装的工具"><a href="#推荐安装的工具" class="headerlink" title="推荐安装的工具"></a>推荐安装的工具</h2><h3 id="Watchman"><a href="#Watchman" class="headerlink" title="Watchman"></a>Watchman</h3><p>Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。</p><blockquote><p>brew install watchman</p></blockquote><p>译注：我推荐使用WebStorm写RN，因为别的用的都不是很爽，代码提示也不怎么友好。下面会给大家说明如何使用代码提示插件。</p><h2 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h2><blockquote><p>react-native init Hello world<br>cd Hello world<br>react-native run-ios</p></blockquote><h2 id="WebStorm代码提示插件"><a href="#WebStorm代码提示插件" class="headerlink" title="WebStorm代码提示插件"></a>WebStorm代码提示插件</h2><blockquote><p><a href="https://github.com/virtoolswebplayer/ReactNative-LiveTemplate.git" target="_blank" rel="noopener">https://github.com/virtoolswebplayer/ReactNative-LiveTemplate.git</a></p></blockquote><p>Github上说的非常清楚，有如何导入文件，导入完成后记得重启，代码提示就搞定了。赶紧去体验体验，让你的手指飞舞起来开吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚搭好博客，一时半会儿也不知道些什么，想想自己在接触RN时遇到的坑，所以就从第一步搭建RN开发环境说起，能让刚接触RN的伙伴们少走一些弯路。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本篇文章是基于iOS 在macOS上搭建RN环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="React Native" scheme="https://zhangyanlf.top/tags/React-Native/"/>
    
  </entry>
  
</feed>
